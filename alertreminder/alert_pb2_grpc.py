# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import alert_pb2 as alert__pb2
import grpc


class AlertManagerStub(object):
    """alertmanager service definition"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Alert = channel.unary_unary(
            "/alert.AlertManager/Alert",
            request_serializer=alert__pb2.AlertRequest.SerializeToString,
            response_deserializer=alert__pb2.Status.FromString,
        )
        self.HandleResponseDeadline = channel.unary_unary(
            "/alert.AlertManager/HandleResponseDeadline",
            request_serializer=alert__pb2.AlertRequest.SerializeToString,
            response_deserializer=alert__pb2.Status.FromString,
        )
        self.handleReceiptConfirmation = channel.unary_unary(
            "/alert.AlertManager/handleReceiptConfirmation",
            request_serializer=alert__pb2.ReceiptConfirmation.SerializeToString,
            response_deserializer=alert__pb2.Status.FromString,
        )


class AlertManagerServicer(object):
    """alertmanager service definition"""

    def Alert(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def HandleResponseDeadline(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def handleReceiptConfirmation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_AlertManagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "Alert": grpc.unary_unary_rpc_method_handler(
            servicer.Alert,
            request_deserializer=alert__pb2.AlertRequest.FromString,
            response_serializer=alert__pb2.Status.SerializeToString,
        ),
        "HandleResponseDeadline": grpc.unary_unary_rpc_method_handler(
            servicer.HandleResponseDeadline,
            request_deserializer=alert__pb2.AlertRequest.FromString,
            response_serializer=alert__pb2.Status.SerializeToString,
        ),
        "handleReceiptConfirmation": grpc.unary_unary_rpc_method_handler(
            servicer.handleReceiptConfirmation,
            request_deserializer=alert__pb2.ReceiptConfirmation.FromString,
            response_serializer=alert__pb2.Status.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "alert.AlertManager", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class AlertManager(object):
    """alertmanager service definition"""

    @staticmethod
    def Alert(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/alert.AlertManager/Alert",
            alert__pb2.AlertRequest.SerializeToString,
            alert__pb2.Status.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def HandleResponseDeadline(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/alert.AlertManager/HandleResponseDeadline",
            alert__pb2.AlertRequest.SerializeToString,
            alert__pb2.Status.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def handleReceiptConfirmation(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/alert.AlertManager/handleReceiptConfirmation",
            alert__pb2.ReceiptConfirmation.SerializeToString,
            alert__pb2.Status.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )


class AlertSenderStub(object):
    """alertsender service definition"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendNotification = channel.unary_unary(
            "/alert.AlertSender/SendNotification",
            request_serializer=alert__pb2.NotificationRequest.SerializeToString,
            response_deserializer=alert__pb2.Status.FromString,
        )


class AlertSenderServicer(object):
    """alertsender service definition"""

    def SendNotification(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_AlertSenderServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "SendNotification": grpc.unary_unary_rpc_method_handler(
            servicer.SendNotification,
            request_deserializer=alert__pb2.NotificationRequest.FromString,
            response_serializer=alert__pb2.Status.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "alert.AlertSender", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class AlertSender(object):
    """alertsender service definition"""

    @staticmethod
    def SendNotification(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/alert.AlertSender/SendNotification",
            alert__pb2.NotificationRequest.SerializeToString,
            alert__pb2.Status.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )


class AlertConfirmerStub(object):
    """alertconfirmer service definition"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.confirmAlertReceipt = channel.unary_unary(
            "/alert.AlertConfirmer/confirmAlertReceipt",
            request_serializer=alert__pb2.ReceiptConfirmation.SerializeToString,
            response_deserializer=alert__pb2.Status.FromString,
        )


class AlertConfirmerServicer(object):
    """alertconfirmer service definition"""

    def confirmAlertReceipt(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_AlertConfirmerServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "confirmAlertReceipt": grpc.unary_unary_rpc_method_handler(
            servicer.confirmAlertReceipt,
            request_deserializer=alert__pb2.ReceiptConfirmation.FromString,
            response_serializer=alert__pb2.Status.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "alert.AlertConfirmer", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class AlertConfirmer(object):
    """alertconfirmer service definition"""

    @staticmethod
    def confirmAlertReceipt(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/alert.AlertConfirmer/confirmAlertReceipt",
            alert__pb2.ReceiptConfirmation.SerializeToString,
            alert__pb2.Status.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
